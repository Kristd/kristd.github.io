<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on TJ Blog</title>
    <link>https://kristd.github.io/tags/golang/</link>
    <description>Recent content in Golang on TJ Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Jul 2017 16:04:45 +0800</lastBuildDate>
    
	<atom:link href="https://kristd.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang异常捕捉方法recover和panic</title>
      <link>https://kristd.github.io/20170719-01/</link>
      <pubDate>Wed, 19 Jul 2017 16:04:45 +0800</pubDate>
      
      <guid>https://kristd.github.io/20170719-01/</guid>
      <description>Golang
golang使用recover和panic作为异常捕获机制。
 panic可以是用户主动调用抛出异常，也可以是一般程序执行中发生的异常，如内存访问错误等。 recover用于捕获panic抛出的异常，特别的是recover只能放在defer的关键字声明的函数体中使用。类似于C++中的try-catch，panic抛出的异常可以被同一层的recover或者上一层的recover捕获，具体依赖于recover所在的位置。  recover和panic的定义 //一般输出error类型 func recover() interface{}  //interface接受任何类型的输入 func panic(v ...interface{})  测试代码 func main() { defer func() { //catch exception if err := recover(); err != nil { fmt.Println(err) } //defer stack fmt.Println(&amp;quot;first defer&amp;quot;) }() defer func() { //defer stack fmt.Println(&amp;quot;second defer&amp;quot;) }() f() } func f() { a := []string{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;} //throw exception defer func() { if err := recover(); err != nil { fmt.</description>
    </item>
    
    <item>
      <title>Golang正则表达式简单用法</title>
      <link>https://kristd.github.io/20170718-01/</link>
      <pubDate>Tue, 18 Jul 2017 14:34:53 +0800</pubDate>
      
      <guid>https://kristd.github.io/20170718-01/</guid>
      <description> Golang
go的regexp包有两种类型函数，比如regexp.MustCompile(string)和regexp.Compile(string)，他们的差别在于Must类型的函数在正则表达式错误时会抛出panic，而非Must类型则会返回error类型。
函数原型对比
func Compile(expr string) (*Regexp, error)  func MustCompile(str string) *Regexp  测试代码 r := regexp.MustCompile(&amp;quot;\&amp;quot;(.+)\&amp;quot;&amp;quot;) //return slice strs := r.FindAllString(&amp;quot;Hel\&amp;quot;lo\&amp;quot; Wor\&amp;quot;ld\&amp;quot;&amp;quot;, -1) //return string str := r.FindString(&amp;quot;Hel\&amp;quot;lo\&amp;quot; Wor\&amp;quot;ld\&amp;quot;&amp;quot;)  </description>
    </item>
    
    <item>
      <title>Golang中websocket/socket/http用法归纳</title>
      <link>https://kristd.github.io/20170630-01/</link>
      <pubDate>Fri, 30 Jun 2017 15:17:57 +0800</pubDate>
      
      <guid>https://kristd.github.io/20170630-01/</guid>
      <description> Golang
websocket //server func HandleConn(conn *websocket.Conn) { body := make([]byte, 1024) n, _ := conn.Read(body) fmt.Println(&amp;quot;body = [&amp;quot;, string(body[:n]), &amp;quot;]&amp;quot;) } func main() { http.Handle(&amp;quot;/websocket&amp;quot;, websocket.Handler(HandleConn)) err := http.ListenAndServe(&amp;quot;:8888&amp;quot;, nil) if err != nil { fmt.Println(&amp;quot;serve err = [&amp;quot;, err, &amp;quot;]&amp;quot;) } } //client func main() { ws, err := websocket.Dial(&amp;quot;ws://localhost:8888/websocket&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;http://localhost:8888/websocket&amp;quot;) if err != nil { log.Fatal(&amp;quot;err = &amp;quot;, err) } else { log.Println(&amp;quot;success&amp;quot;) } ws.Write([]byte(&amp;quot;HelloWorld&amp;quot;)) ws.Close() }  socket  http  </description>
    </item>
    
    <item>
      <title>使用Go语言每分钟处理1百万请求</title>
      <link>https://kristd.github.io/20170629-01/</link>
      <pubDate>Thu, 29 Jun 2017 00:39:44 +0800</pubDate>
      
      <guid>https://kristd.github.io/20170629-01/</guid>
      <description>Golang
译文链接 | 原文链接 在Malwarebytes 我们经历了显著的增长，自从我一年前加入了硅谷的公司，一个主要的职责成了设计架构和开发一些系统来支持一个快速增长的信息安全公司和所有需要的设施来支持一个每天百万用户使用的产品。我在反病毒和反恶意软件行业的不同公司工作了12年，从而我知道由于我们每天处理大量的数据，这些系统是多么复杂。
有趣的是，在过去的大约9年间，我参与的所有的web后端的开发通常是通过Ruby on Rails技术实现的。不要错怪我。我喜欢Ruby on Rails，并且我相信它是个令人惊讶的环境。但是一段时间后，你会开始以ruby的方式开始思考和设计系统，你会忘记，如果你可以利用多线程、并行、快速执行和小内存开销，软件架构本来应该是多么高效和简单。很多年期间，我是一个c/c++、Delphi和c#开发者，我刚开始意识到使用正确的工具可以把复杂的事情变得简单些。
作为首席架构师，我不会很关心在互联网上的语言和框架战争。我相信效率、生产力。代码可维护性主要依赖于你如何把解决方案设计得很简单。
问题 当工作在我们的匿名遥测和分析系统中，我们的目标是可以处理来自于百万级别的终端的大量的POST请求。web处理服务可以接收包含了很多payload的集合的JSON数据，这些数据需要写入Amazon S3中。接下来，map-reduce系统可以操作这些数据。
按照习惯，我们会调研服务层级架构，涉及的软件如下：
 Sidekiq
 Resque DelayedJob Elasticbeanstalk Worker Tier RabbitMQ and so on…
  搭建了2个不同的集群，一个提供web前端，另外一个提供后端处理，这样我们可以横向扩展后端服务的数量。
但是，从刚开始，在讨论阶段我们的团队就知道我们应该使用Go，因为我们看到这会潜在性地成为一个非常庞大（ large traffic）的系统。我已经使用了Go语言大约2年时间，我们开发了几个系统，但是很少会达到这样的负载（amount of load）。
我们开始创建一些结构，定义从POST调用得到的web请求负载，还有一个上传到S3 budket的函数。
type PayloadCollection struct { WindowsVersion string `json:&amp;quot;version&amp;quot;` Token string `json:&amp;quot;token&amp;quot;` Payloads []Payload `json:&amp;quot;data&amp;quot;` } type Payload struct { // [redacted] } func (p *Payload) UploadToS3() error { // the storageFolder method ensures that there are no name collision in // case we get same timestamp in the key name storage_path := fmt.</description>
    </item>
    
    <item>
      <title>Golang使用断言的类型转换方法</title>
      <link>https://kristd.github.io/20170628-01/</link>
      <pubDate>Wed, 28 Jun 2017 00:44:37 +0800</pubDate>
      
      <guid>https://kristd.github.io/20170628-01/</guid>
      <description> Golang
问题 在对interface做类型转换时需要使用断言来转换成正确的类型
代码 type R struct { Config []map[string]interface{} } r := &amp;amp;R{} //转换成字符串 key1, ret := r.Config[0][&amp;quot;key1&amp;quot;].(string) if ret { fmt.Println(&amp;quot;success&amp;quot;) } //转换成数组 array1, ret := r.Config[0][&amp;quot;array1&amp;quot;].([]interface{}) if ret { fmt.Println(&amp;quot;success&amp;quot;) }  </description>
    </item>
    
    <item>
      <title>Golang动态处理JSON数据结构</title>
      <link>https://kristd.github.io/20170627-01/</link>
      <pubDate>Tue, 27 Jun 2017 23:25:37 +0800</pubDate>
      
      <guid>https://kristd.github.io/20170627-01/</guid>
      <description> 问题 解决办法 Golang的反射机制 </description>
    </item>
    
  </channel>
</rss>