<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on TJ&#39;s Blog</title>
    <link>https://kristd.github.io/tags/golang/</link>
    <description>Recent content in Golang on TJ&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Aug 2017 15:12:01 +0800</lastBuildDate>
    
	<atom:link href="https://kristd.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>golang的int转换为duration类型</title>
      <link>https://kristd.github.io/post/2017/08/07/golang%E7%9A%84int%E8%BD%AC%E6%8D%A2%E4%B8%BAduration%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 07 Aug 2017 15:12:01 +0800</pubDate>
      
      <guid>https://kristd.github.io/post/2017/08/07/golang%E7%9A%84int%E8%BD%AC%E6%8D%A2%E4%B8%BAduration%E7%B1%BB%E5%9E%8B/</guid>
      <description> 问题 在调用time.sleep的时候如果传入一个整形的变量会有如下报错：
var t int time.Sleep(time.Second * t) // error &amp;gt;&amp;gt; invalid operation: time.Second * t (mismatched types time.Duration and int)`  解决办法 golang的time.Duration类型背后是int64
type Duration int64`  我们需要对整形t做一个类型转换才能正确调用该函数
time.Sleep(time.Second * time.Duration(t)) // success  </description>
    </item>
    
    <item>
      <title>Golang定时器NewTicker</title>
      <link>https://kristd.github.io/post/2017/08/02/golang%E5%AE%9A%E6%97%B6%E5%99%A8newticker/</link>
      <pubDate>Wed, 02 Aug 2017 11:15:47 +0800</pubDate>
      
      <guid>https://kristd.github.io/post/2017/08/02/golang%E5%AE%9A%E6%97%B6%E5%99%A8newticker/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Golang异常捕捉方法recover和panic</title>
      <link>https://kristd.github.io/post/2017/07/19/golang%E5%BC%82%E5%B8%B8%E6%8D%95%E6%8D%89%E6%96%B9%E6%B3%95recover%E5%92%8Cpanic/</link>
      <pubDate>Wed, 19 Jul 2017 22:29:05 +0800</pubDate>
      
      <guid>https://kristd.github.io/post/2017/07/19/golang%E5%BC%82%E5%B8%B8%E6%8D%95%E6%8D%89%E6%96%B9%E6%B3%95recover%E5%92%8Cpanic/</guid>
      <description>go使用recover和panic作为异常捕获机制。
 panic可以是用户主动调用抛出异常，也可以是一般程序执行中发生的异常，如内存访问错误等。 recover用于捕获panic抛出的异常，特别的是recover只能放在defer的关键字声明的函数体中使用。类似于C++中的try-catch，panic抛出的异常可以被同一层的recover或者上一层的recover捕获，具体依赖于recover所在的位置。  recover和panic的定义 //一般输出error类型 func recover() interface{} //interface接受任何类型的输入 func panic(v ...interface{})  测试代码 func main() { defer func() { //catch exception if err := recover(); err != nil { fmt.Println(err) } //defer stack fmt.Println(&amp;quot;first defer&amp;quot;) }() defer func() { //defer stack fmt.Println(&amp;quot;second defer&amp;quot;) }() f() } func f() { a := []string{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;} //throw exception defer func() { if err := recover(); err != nil { fmt.</description>
    </item>
    
    <item>
      <title>Golang正则表达式简单用法</title>
      <link>https://kristd.github.io/post/2017/07/18/golang%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 18 Jul 2017 01:51:09 +0800</pubDate>
      
      <guid>https://kristd.github.io/post/2017/07/18/golang%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</guid>
      <description> go的regexp包有两种类型函数，比如regexp.MustCompile(string)和regexp.Compile(string)，他们的差别在于Must类型的函数在正则表达式错误时会抛出panic，而非Must类型则会返回error类型。
函数原型对比 func Compile(expr string) (*Regexp, error) func MustCompile(str string) *Regexp  测试代码 r := regexp.MustCompile(`&amp;quot;(.+)&amp;quot;`) //return slice strs := r.FindAllString(`Hel&amp;quot;lo&amp;quot; Wor&amp;quot;ld&amp;quot;`, -1) //return string str := r.FindString(`Hel&amp;quot;lo&amp;quot; Wor&amp;quot;ld&amp;quot;`)  </description>
    </item>
    
    <item>
      <title>Golang中websocket/socket/http用法归纳</title>
      <link>https://kristd.github.io/post/2017/06/30/golang%E4%B8%ADwebsocket/socket/http%E7%94%A8%E6%B3%95%E5%BD%92%E7%BA%B3/</link>
      <pubDate>Fri, 30 Jun 2017 20:30:01 +0800</pubDate>
      
      <guid>https://kristd.github.io/post/2017/06/30/golang%E4%B8%ADwebsocket/socket/http%E7%94%A8%E6%B3%95%E5%BD%92%E7%BA%B3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>使用Go语言每分钟处理1百万请求</title>
      <link>https://kristd.github.io/post/2017/06/29/%E4%BD%BF%E7%94%A8go%E8%AF%AD%E8%A8%80%E6%AF%8F%E5%88%86%E9%92%9F%E5%A4%84%E7%90%861%E7%99%BE%E4%B8%87%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Thu, 29 Jun 2017 20:17:09 +0800</pubDate>
      
      <guid>https://kristd.github.io/post/2017/06/29/%E4%BD%BF%E7%94%A8go%E8%AF%AD%E8%A8%80%E6%AF%8F%E5%88%86%E9%92%9F%E5%A4%84%E7%90%861%E7%99%BE%E4%B8%87%E8%AF%B7%E6%B1%82/</guid>
      <description>译文链接 | 原文链接
在Malwarebytes 我们经历了显著的增长，自从我一年前加入了硅谷的公司，一个主要的职责成了设计架构和开发一些系统来支持一个快速增长的信息安全公司和所有需要的设施来支持一个每天百万用户使用的产品。我在反病毒和反恶意软件行业的不同公司工作了12年，从而我知道由于我们每天处理大量的数据，这些系统是多么复杂。
有趣的是，在过去的大约9年间，我参与的所有的web后端的开发通常是通过Ruby on Rails技术实现的。不要错怪我。我喜欢Ruby on Rails，并且我相信它是个令人惊讶的环境。但是一段时间后，你会开始以ruby的方式开始思考和设计系统，你会忘记，如果你可以利用多线程、并行、快速执行和小内存开销，软件架构本来应该是多么高效和简单。很多年期间，我是一个c/c++、Delphi和c#开发者，我刚开始意识到使用正确的工具可以把复杂的事情变得简单些。
作为首席架构师，我不会很关心在互联网上的语言和框架战争。我相信效率、生产力。代码可维护性主要依赖于你如何把解决方案设计得很简单。
问题 当工作在我们的匿名遥测和分析系统中，我们的目标是可以处理来自于百万级别的终端的大量的POST请求。web处理服务可以接收包含了很多payload的集合的JSON数据，这些数据需要写入Amazon S3中。接下来，map-reduce系统可以操作这些数据。
按照习惯，我们会调研服务层级架构，涉及的软件如下：
 Sidekiq Resque DelayedJob Elasticbeanstalk Worker Tier RabbitMQ and so on…  搭建了2个不同的集群，一个提供web前端，另外一个提供后端处理，这样我们可以横向扩展后端服务的数量。
但是，从刚开始，在讨论阶段我们的团队就知道我们应该使用Go，因为我们看到这会潜在性地成为一个非常庞大（ large traffic）的系统。我已经使用了Go语言大约2年时间，我们开发了几个系统，但是很少会达到这样的负载（amount of load）。
我们开始创建一些结构，定义从POST调用得到的web请求负载，还有一个上传到S3 budket的函数。
type PayloadCollection struct { WindowsVersion string `json:&amp;quot;version&amp;quot;` Token string `json:&amp;quot;token&amp;quot;` Payloads []Payload `json:&amp;quot;data&amp;quot;` } type Payload struct { // [redacted] } func (p *Payload) UploadToS3() error { // the storageFolder method ensures that there are no name collision in // case we get same timestamp in the key name storage_path := fmt.</description>
    </item>
    
    <item>
      <title>Golang使用断言进行类型转换</title>
      <link>https://kristd.github.io/post/2017/06/28/golang%E4%BD%BF%E7%94%A8%E6%96%AD%E8%A8%80%E8%BF%9B%E8%A1%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 28 Jun 2017 01:56:46 +0800</pubDate>
      
      <guid>https://kristd.github.io/post/2017/06/28/golang%E4%BD%BF%E7%94%A8%E6%96%AD%E8%A8%80%E8%BF%9B%E8%A1%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description> 在对interface做类型转换时需要使用断言来转换成正确的类型。
测试代码 type R struct { Config []map[string]interface{} } r := &amp;amp;R{} //转换成字符串 key1, ret := r.Config[0][&amp;quot;key1&amp;quot;].(string) if ret { fmt.Println(&amp;quot;success&amp;quot;) } //转换成数组 array1, ret := r.Config[0][&amp;quot;array1&amp;quot;].([]interface{}) if ret { fmt.Println(&amp;quot;success&amp;quot;) }  </description>
    </item>
    
  </channel>
</rss>